// Code generated by protoc-gen-go. DO NOT EDIT.
// source: employee.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	employee.proto

It has these top-level messages:
	EmployeeRequest
	EmployeeResponse
	EmployeeFilter
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EmployeeRequest struct {
	Id        string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name      string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Age       int32   `protobuf:"varint,3,opt,name=age" json:"age,omitempty"`
	Address   string  `protobuf:"bytes,4,opt,name=address" json:"address,omitempty"`
	Salary    float64 `protobuf:"fixed64,5,opt,name=salary" json:"salary,omitempty"`
	CreatedAt string  `protobuf:"bytes,6,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt string  `protobuf:"bytes,7,opt,name=updatedAt" json:"updatedAt,omitempty"`
	Version   int32   `protobuf:"varint,8,opt,name=version" json:"version,omitempty"`
}

func (m *EmployeeRequest) Reset()                    { *m = EmployeeRequest{} }
func (m *EmployeeRequest) String() string            { return proto.CompactTextString(m) }
func (*EmployeeRequest) ProtoMessage()               {}
func (*EmployeeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EmployeeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EmployeeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EmployeeRequest) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *EmployeeRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EmployeeRequest) GetSalary() float64 {
	if m != nil {
		return m.Salary
	}
	return 0
}

func (m *EmployeeRequest) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *EmployeeRequest) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *EmployeeRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type EmployeeResponse struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *EmployeeResponse) Reset()                    { *m = EmployeeResponse{} }
func (m *EmployeeResponse) String() string            { return proto.CompactTextString(m) }
func (*EmployeeResponse) ProtoMessage()               {}
func (*EmployeeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EmployeeResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EmployeeResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type EmployeeFilter struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *EmployeeFilter) Reset()                    { *m = EmployeeFilter{} }
func (m *EmployeeFilter) String() string            { return proto.CompactTextString(m) }
func (*EmployeeFilter) ProtoMessage()               {}
func (*EmployeeFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EmployeeFilter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterType((*EmployeeRequest)(nil), "api.EmployeeRequest")
	proto.RegisterType((*EmployeeResponse)(nil), "api.EmployeeResponse")
	proto.RegisterType((*EmployeeFilter)(nil), "api.EmployeeFilter")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EmployeeService service

type EmployeeServiceClient interface {
	CreateEmployee(ctx context.Context, in *EmployeeRequest, opts ...grpc.CallOption) (*EmployeeResponse, error)
	GetEmployee(ctx context.Context, in *EmployeeFilter, opts ...grpc.CallOption) (EmployeeService_GetEmployeeClient, error)
}

type employeeServiceClient struct {
	cc *grpc.ClientConn
}

func NewEmployeeServiceClient(cc *grpc.ClientConn) EmployeeServiceClient {
	return &employeeServiceClient{cc}
}

func (c *employeeServiceClient) CreateEmployee(ctx context.Context, in *EmployeeRequest, opts ...grpc.CallOption) (*EmployeeResponse, error) {
	out := new(EmployeeResponse)
	err := grpc.Invoke(ctx, "/api.EmployeeService/CreateEmployee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) GetEmployee(ctx context.Context, in *EmployeeFilter, opts ...grpc.CallOption) (EmployeeService_GetEmployeeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EmployeeService_serviceDesc.Streams[0], c.cc, "/api.EmployeeService/GetEmployee", opts...)
	if err != nil {
		return nil, err
	}
	x := &employeeServiceGetEmployeeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EmployeeService_GetEmployeeClient interface {
	Recv() (*EmployeeRequest, error)
	grpc.ClientStream
}

type employeeServiceGetEmployeeClient struct {
	grpc.ClientStream
}

func (x *employeeServiceGetEmployeeClient) Recv() (*EmployeeRequest, error) {
	m := new(EmployeeRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EmployeeService service

type EmployeeServiceServer interface {
	CreateEmployee(context.Context, *EmployeeRequest) (*EmployeeResponse, error)
	GetEmployee(*EmployeeFilter, EmployeeService_GetEmployeeServer) error
}

func RegisterEmployeeServiceServer(s *grpc.Server, srv EmployeeServiceServer) {
	s.RegisterService(&_EmployeeService_serviceDesc, srv)
}

func _EmployeeService_CreateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).CreateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EmployeeService/CreateEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).CreateEmployee(ctx, req.(*EmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_GetEmployee_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmployeeFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EmployeeServiceServer).GetEmployee(m, &employeeServiceGetEmployeeServer{stream})
}

type EmployeeService_GetEmployeeServer interface {
	Send(*EmployeeRequest) error
	grpc.ServerStream
}

type employeeServiceGetEmployeeServer struct {
	grpc.ServerStream
}

func (x *employeeServiceGetEmployeeServer) Send(m *EmployeeRequest) error {
	return x.ServerStream.SendMsg(m)
}

var _EmployeeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.EmployeeService",
	HandlerType: (*EmployeeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEmployee",
			Handler:    _EmployeeService_CreateEmployee_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEmployee",
			Handler:       _EmployeeService_GetEmployee_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "employee.proto",
}

func init() { proto.RegisterFile("employee.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xcb, 0x4e, 0xc3, 0x30,
	0x10, 0xac, 0xfb, 0x4a, 0xbb, 0x48, 0xa1, 0x32, 0x0f, 0x59, 0x15, 0x87, 0xc8, 0xa7, 0x9c, 0x22,
	0x04, 0xd7, 0x4a, 0x08, 0x21, 0xe0, 0x1e, 0xbe, 0xc0, 0xc4, 0x2b, 0x64, 0x91, 0x26, 0xc6, 0x76,
	0x2a, 0xe5, 0x2f, 0xf8, 0x33, 0x7e, 0x09, 0xd9, 0x49, 0x5a, 0x28, 0xdc, 0x76, 0x66, 0x76, 0x92,
	0x99, 0x35, 0xc4, 0xb8, 0xd5, 0x65, 0xdd, 0x22, 0x66, 0xda, 0xd4, 0xae, 0xa6, 0x13, 0xa1, 0x15,
	0xff, 0x22, 0x70, 0xfa, 0xd8, 0xf3, 0x39, 0x7e, 0x34, 0x68, 0x1d, 0x8d, 0x61, 0xac, 0x24, 0x23,
	0x09, 0x49, 0x97, 0xf9, 0x58, 0x49, 0x4a, 0x61, 0x5a, 0x89, 0x2d, 0xb2, 0x71, 0x60, 0xc2, 0x4c,
	0x57, 0x30, 0x11, 0x6f, 0xc8, 0x26, 0x09, 0x49, 0x67, 0xb9, 0x1f, 0x29, 0x83, 0x48, 0x48, 0x69,
	0xd0, 0x5a, 0x36, 0x0d, 0x8b, 0x03, 0xa4, 0x97, 0x30, 0xb7, 0xa2, 0x14, 0xa6, 0x65, 0xb3, 0x84,
	0xa4, 0x24, 0xef, 0x11, 0xbd, 0x82, 0x65, 0x61, 0x50, 0x38, 0x94, 0xf7, 0x8e, 0xcd, 0x83, 0xe7,
	0x40, 0x78, 0xb5, 0xd1, 0xb2, 0x57, 0xa3, 0x4e, 0xdd, 0x13, 0xfe, 0x6f, 0x3b, 0x34, 0x56, 0xd5,
	0x15, 0x5b, 0x84, 0x0c, 0x03, 0xe4, 0x1b, 0x58, 0x1d, 0x0a, 0x59, 0x5d, 0x57, 0x16, 0xff, 0x34,
	0x62, 0x10, 0xd9, 0xa6, 0x28, 0x7c, 0x56, 0x5f, 0x6a, 0x91, 0x0f, 0x90, 0x73, 0x88, 0x07, 0xf7,
	0x93, 0x2a, 0x1d, 0x1a, 0xdf, 0xf4, 0x1d, 0xdb, 0xde, 0xec, 0xc7, 0x9b, 0xcf, 0x1f, 0x37, 0x7b,
	0x41, 0xb3, 0x53, 0x05, 0xd2, 0x3b, 0x88, 0x1f, 0x42, 0xf4, 0x41, 0xa0, 0xe7, 0x99, 0xd0, 0x2a,
	0x3b, 0xba, 0xed, 0xfa, 0xe2, 0x88, 0xed, 0x02, 0xf2, 0x11, 0xdd, 0xc0, 0xc9, 0x33, 0xba, 0xbd,
	0xfb, 0xec, 0xd7, 0x5e, 0x17, 0x65, 0xfd, 0xef, 0x27, 0xf9, 0xe8, 0x9a, 0xbc, 0xce, 0xc3, 0x93,
	0xde, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x06, 0x16, 0x1c, 0x19, 0xe4, 0x01, 0x00, 0x00,
}
